load("eigen") $

%tensor_idx_list%: [[1,1], [2,2], [3,3], [1,2], [1,3], [2,3]]$
extend_to_3d(P):= if length(P)=3 then P else addrow(addcol(P, [0, 0]), [0, 0, 0]);
fix_dim(P):= if length(P)=3 and %d%=2 then submatrix(3, P, 3) else P;

unpack_tensor(P):= block([S: extend_to_3d(P)], local(S), maplist(lambda([el], local(el), S[el[1], el[2]]), %tensor_idx_list%))$
pack_tensor(L):= block([P: zeromatrix(3, 3)], local(P, L, %tensor_idx_list%), 
  for i thru length(%tensor_idx_list%) do (arraymake('P, %tensor_idx_list%[i]) :: L[i], arraymake('P, reverse(%tensor_idx_list%[i])) :: L[i]),
  P)$

ndim   : 3;
dx     : 0.5;
cutoff : 1.1*3*dx;

load("../scripts/sph-kernel.mac");
define_kernel(ndim, cutoff, 'quintic, 'w_scalar, 'dw_scalar)$

vabs(dr):= sqrt(dr.dr);
w(dr):= block([r: vabs(dr)], ''(w_scalar(r)));
dw(dr):= block([r: vabs(dr)], dr/r * ''(dw_scalar(r)));
u(dr):= block([r: vabs(dr)], dr/r);

x: [[0, 0, 0], [dx, 0, dx], [0, dx, 0], [dx, dx, 0]];
type: [1, 3, 2, 3];
m:   [1,  1, 1, 1];
sph_rho_loop(expr)::= buildq([expr, n: length(x)], create_list(
    sum(expr, j, 1, n),
    i, 1, n));
rho: sph_rho_loop( m[i]*w(x[i] - x[j]));

with_stdout("in.atoms",
  printf(true, "variable  h equal ~g~%", cutoff),
  for id thru length(x) do (
    if ndim=3 then printf(true, "create_atoms ~d single ~{~g ~} units box~%", type[id], x[id])
    else            printf(true, "create_atoms ~d single ~{~g ~} units box~%", type[id], endcons(0, x[id]))));

sph_color_loop(expr)::= buildq([expr, n: length(x)], create_list(
    block([k: type[i]],
      sum(block([l: type[j]],
          if i#j and l#k then expr else 0), j, 1, n)),
    i, 1, n));

sph_one_loop(expr)::= buildq([expr, n: length(x)],
  create_list(expr, i, 1, n));

sph_force_loop(expr)::= buildq([expr, n: length(x)], create_list(
    block([k: type[i]],
      sum(block([l: type[j]],
          if i#j then expr else 0), j, 1, n)),
    i, 1, n));

C[k,l,p]:= if k#l and l=p then 1 else 0;
alpha[k,l]:= 1 - kron_delta(k,l);

for p thru lmax(type) do (
dC: sph_color_loop(block([sigmai: rho[i]/m[i], sigmaj: rho[j]/m[j]],
    sigmai*(C[k,l,p]/sigmaj^2)*dw(x[i] - x[j]))),
Pm_aux: sph_one_loop(
  if vabs(dC[i])>0 then 
  (1/ndim*ident(ndim) * dC[i].columnvector(dC[i]) -
    columnvector(dC[i]).dC[i])/vabs(dC[i])
  else 0),
if not listp(Pm) then Pm: Pm_aux*0,
Pm: Pm + Pm_aux);
      
Fs: sph_force_loop(
  block([sigmai: rho[i]/m[i], sigmaj: rho[j]/m[j]],
    alpha[k,l]*dw(x[i] - x[j]) . (Pm[i]/sigmai^2 + Pm[j]/sigmaj^2)));

/* show surface tension */
Fs/m, numer;

Fs[1]/m[1], numer;
