/*

1 <-> [2, 3]:
2 <-> [1, 3]:
3 <-> [1, 2]:

*/

ndim   : 2;
dx     : 0.5;
cutoff : 1.1*3*dx;

load("../scripts/sph-kernel.mac");
define_kernel(ndim, cutoff, 'quintic, 'w_scalar, 'dw_scalar)$

vabs(dr):= sqrt(dr.dr);
w(dr):= block([r: vabs(dr)], ''(w_scalar(r)));
dw(dr):= block([r: vabs(dr)], dr/r * ''(dw_scalar(r)));

x: [[2*dx, 0], [0, 0], [dx, 0]];
type: [2, 1, 1];

m:   [0.671126, 0.671126, 0.671126];

sph_rho_loop(expr)::= buildq([expr, n: length(x)], create_list(
    sum(expr, j, 1, n),
    i, 1, n));
rho: sph_rho_loop( m[i]*w(x[i] - x[j]));

rho, numer;


with_stdout("in.atoms",
  for id thru length(x) do
  printf(true, "create_atoms ~d single ~{~g ~} units box~%", type[id], x[id]));


sph_color_loop(expr)::= buildq([expr, n: length(x)], create_list(
    block([k: type[i]],
      sum(block([l: type[j]],
          if i#j and l#k then expr else 0), j, 1, n)),
    i, 1, n));

C[s,i]:= kron_delta(s, type[i]);

dC: sph_color_loop( block([sigmai: rho[i]/m[i], sigmaj: rho[j]/m[j]],
    print(sigmai, sigmaj),
    sigmai*(C[l,i]/sigmai^2 + C[l,j]/sigmaj^2)*dw(x[i] - x[j])));

/* show color gradient */
makelist(vabs(dC[d]), d, 2), numer ;

dC;
